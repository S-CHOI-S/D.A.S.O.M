# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from open_manipulator_msgs/SetKinematicsPoseRequest.msg. Do not edit."""
import codecs
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import geometry_msgs.msg
import open_manipulator_msgs.msg

class SetKinematicsPoseRequest(genpy.Message):
  _md5sum = "061ceb25b20ec55ef37bf7bab518c5c3"
  _type = "open_manipulator_msgs/SetKinematicsPoseRequest"
  _has_header = False  # flag to mark the presence of a Header object
  _full_text = """KinematicsPose kinematics_pose

================================================================================
MSG: open_manipulator_msgs/KinematicsPose
string    	        group_name
geometry_msgs/Pose  pose
float64    max_accelerations_scaling_factor
float64    max_velocity_scaling_factor
float64    tolerance

================================================================================
MSG: geometry_msgs/Pose
# A representation of pose in free space, composed of position and orientation. 
Point position
Quaternion orientation

================================================================================
MSG: geometry_msgs/Point
# This contains the position of a point in free space
float64 x
float64 y
float64 z

================================================================================
MSG: geometry_msgs/Quaternion
# This represents an orientation in free space in quaternion form.

float64 x
float64 y
float64 z
float64 w
"""
  __slots__ = ['kinematics_pose']
  _slot_types = ['open_manipulator_msgs/KinematicsPose']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       kinematics_pose

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(SetKinematicsPoseRequest, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.kinematics_pose is None:
        self.kinematics_pose = open_manipulator_msgs.msg.KinematicsPose()
    else:
      self.kinematics_pose = open_manipulator_msgs.msg.KinematicsPose()

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self.kinematics_pose.group_name
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_10d().pack(_x.kinematics_pose.pose.position.x, _x.kinematics_pose.pose.position.y, _x.kinematics_pose.pose.position.z, _x.kinematics_pose.pose.orientation.x, _x.kinematics_pose.pose.orientation.y, _x.kinematics_pose.pose.orientation.z, _x.kinematics_pose.pose.orientation.w, _x.kinematics_pose.max_accelerations_scaling_factor, _x.kinematics_pose.max_velocity_scaling_factor, _x.kinematics_pose.tolerance))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.kinematics_pose is None:
        self.kinematics_pose = open_manipulator_msgs.msg.KinematicsPose()
      end = 0
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.kinematics_pose.group_name = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.kinematics_pose.group_name = str[start:end]
      _x = self
      start = end
      end += 80
      (_x.kinematics_pose.pose.position.x, _x.kinematics_pose.pose.position.y, _x.kinematics_pose.pose.position.z, _x.kinematics_pose.pose.orientation.x, _x.kinematics_pose.pose.orientation.y, _x.kinematics_pose.pose.orientation.z, _x.kinematics_pose.pose.orientation.w, _x.kinematics_pose.max_accelerations_scaling_factor, _x.kinematics_pose.max_velocity_scaling_factor, _x.kinematics_pose.tolerance,) = _get_struct_10d().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self.kinematics_pose.group_name
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_10d().pack(_x.kinematics_pose.pose.position.x, _x.kinematics_pose.pose.position.y, _x.kinematics_pose.pose.position.z, _x.kinematics_pose.pose.orientation.x, _x.kinematics_pose.pose.orientation.y, _x.kinematics_pose.pose.orientation.z, _x.kinematics_pose.pose.orientation.w, _x.kinematics_pose.max_accelerations_scaling_factor, _x.kinematics_pose.max_velocity_scaling_factor, _x.kinematics_pose.tolerance))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.kinematics_pose is None:
        self.kinematics_pose = open_manipulator_msgs.msg.KinematicsPose()
      end = 0
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.kinematics_pose.group_name = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.kinematics_pose.group_name = str[start:end]
      _x = self
      start = end
      end += 80
      (_x.kinematics_pose.pose.position.x, _x.kinematics_pose.pose.position.y, _x.kinematics_pose.pose.position.z, _x.kinematics_pose.pose.orientation.x, _x.kinematics_pose.pose.orientation.y, _x.kinematics_pose.pose.orientation.z, _x.kinematics_pose.pose.orientation.w, _x.kinematics_pose.max_accelerations_scaling_factor, _x.kinematics_pose.max_velocity_scaling_factor, _x.kinematics_pose.tolerance,) = _get_struct_10d().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_10d = None
def _get_struct_10d():
    global _struct_10d
    if _struct_10d is None:
        _struct_10d = struct.Struct("<10d")
    return _struct_10d
# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from open_manipulator_msgs/SetKinematicsPoseResponse.msg. Do not edit."""
import codecs
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct


class SetKinematicsPoseResponse(genpy.Message):
  _md5sum = "c4a8e64ceeeccdab98609099e2b0c166"
  _type = "open_manipulator_msgs/SetKinematicsPoseResponse"
  _has_header = False  # flag to mark the presence of a Header object
  _full_text = """bool isPlanned

"""
  __slots__ = ['isPlanned']
  _slot_types = ['bool']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       isPlanned

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(SetKinematicsPoseResponse, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.isPlanned is None:
        self.isPlanned = False
    else:
      self.isPlanned = False

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self.isPlanned
      buff.write(_get_struct_B().pack(_x))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      end = 0
      start = end
      end += 1
      (self.isPlanned,) = _get_struct_B().unpack(str[start:end])
      self.isPlanned = bool(self.isPlanned)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self.isPlanned
      buff.write(_get_struct_B().pack(_x))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      end = 0
      start = end
      end += 1
      (self.isPlanned,) = _get_struct_B().unpack(str[start:end])
      self.isPlanned = bool(self.isPlanned)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_B = None
def _get_struct_B():
    global _struct_B
    if _struct_B is None:
        _struct_B = struct.Struct("<B")
    return _struct_B
class SetKinematicsPose(object):
  _type          = 'open_manipulator_msgs/SetKinematicsPose'
  _md5sum = '4841916847c645ef404d13cebf9595cb'
  _request_class  = SetKinematicsPoseRequest
  _response_class = SetKinematicsPoseResponse
